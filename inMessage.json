 IncomingMessage {
   _readableState:
    ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: true,
      endEmitted: true,
      reading: false,
      sync: false,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      defaultEncoding: 'utf8',
      ranOut: false,
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null },
   readable: false,
   domain: null,
   _events: {},
   _eventsCount: 0,
   _maxListeners: undefined,
   socket:
    Socket {
      connecting: false,
      _hadError: false,
      _handle:
       TCP {
         bytesRead: 761,
         _externalStream: {},
         fd: 11,
         reading: true,
         owner: [Circular],
         onread: [Function: onread],
         onconnection: null,
         writeQueueSize: 0,
         _consumed: true },
      _parent: null,
      _host: null,
      _readableState:
       ReadableState {
         objectMode: false,
         highWaterMark: 16384,
         buffer: [Object],
         length: 0,
         pipes: null,
         pipesCount: 0,
         flowing: true,
         ended: false,
         endEmitted: false,
         reading: true,
         sync: false,
         needReadable: true,
         emittedReadable: false,
         readableListening: false,
         resumeScheduled: false,
         defaultEncoding: 'utf8',
         ranOut: false,
         awaitDrain: 0,
         readingMore: false,
         decoder: null,
         encoding: null },
      readable: true,
      domain: null,
      _events:
       { end: [Object],
         finish: [Function: onSocketFinish],
         _socketEnd: [Function: onSocketEnd],
         drain: [Object],
         timeout: [Function],
         error: [Function: socketOnError],
         close: [Object],
         data: [Function: socketOnData],
         resume: [Function: onSocketResume],
         pause: [Function: onSocketPause] },
      _eventsCount: 10,
      _maxListeners: undefined,
      _writableState:
       WritableState {
         objectMode: false,
         highWaterMark: 16384,
         needDrain: false,
         ending: false,
         ended: false,
         finished: false,
         decodeStrings: false,
         defaultEncoding: 'utf8',
         length: 0,
         writing: false,
         corked: 0,
         sync: true,
         bufferProcessing: false,
         onwrite: [Function],
         writecb: null,
         writelen: 0,
         bufferedRequest: null,
         lastBufferedRequest: null,
         pendingcb: 0,
         prefinished: false,
         errorEmitted: false,
         bufferedRequestCount: 0,
         corkedRequestsFree: [Object] },
      writable: true,
      allowHalfOpen: true,
      destroyed: false,
      _bytesDispatched: 0,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server:
       Server {
         domain: null,
         _events: [Object],
         _eventsCount: 2,
         _maxListeners: undefined,
         _connections: 1,
         _handle: [Object],
         _usingSlaves: false,
         _slaves: [],
         _unref: false,
         allowHalfOpen: true,
         pauseOnConnect: false,
         httpAllowHalfOpen: false,
         timeout: 120000,
         _pendingResponseData: 0,
         _connectionKey: '6::::36441' },
      _server:
       Server {
         domain: null,
         _events: [Object],
         _eventsCount: 2,
         _maxListeners: undefined,
         _connections: 1,
         _handle: [Object],
         _usingSlaves: false,
         _slaves: [],
         _unref: false,
         allowHalfOpen: true,
         pauseOnConnect: false,
         httpAllowHalfOpen: false,
         timeout: 120000,
         _pendingResponseData: 0,
         _connectionKey: '6::::36441' },
      _idleTimeout: 120000,
      _idleNext:
       TimersList {
         _idleNext: [Circular],
         _idlePrev: [Circular],
         _timer: [Object],
         _unrefed: true,
         msecs: 120000,
         nextTick: false },
      _idlePrev:
       TimersList {
         _idleNext: [Circular],
         _idlePrev: [Circular],
         _timer: [Object],
         _unrefed: true,
         msecs: 120000,
         nextTick: false },
      _idleStart: 29763,
      parser:
       HTTPParser {
         '0': [Function: parserOnHeaders],
         '1': [Function: parserOnHeadersComplete],
         '2': [Function: parserOnBody],
         '3': [Function: parserOnMessageComplete],
         '4': [Function: onParserExecute],
         _headers: [],
         _url: '',
         _consumed: true,
         socket: [Circular],
         incoming: [Circular],
         outgoing: null,
         maxHeaderPairs: 2000,
         onIncoming: [Function: parserOnIncoming] },
      on: [Function: socketOnWrap],
      _paused: false,
      read: [Function],
      _consuming: true,
      _httpMessage:
       ServerResponse {
         domain: null,
         _events: [Object],
         _eventsCount: 1,
         _maxListeners: undefined,
         output: [],
         outputEncodings: [],
         outputCallbacks: [],
         outputSize: 0,
         writable: true,
         _last: false,
         upgrading: false,
         chunkedEncoding: false,
         shouldKeepAlive: false,
         useChunkedEncodingByDefault: true,
         sendDate: true,
         _removedHeader: {},
         _contentLength: null,
         _hasBody: true,
         _trailer: '',
         finished: false,
         _headerSent: false,
         socket: [Circular],
         connection: [Circular],
         _header: null,
         _headers: [Object],
         _headerNames: [Object],
         _onPendingData: [Function: updateOutgoingData],
         req: [Circular],
         locals: {} } },
   connection:
    Socket {
      connecting: false,
      _hadError: false,
      _handle:
       TCP {
         bytesRead: 761,
         _externalStream: {},
         fd: 11,
         reading: true,
         owner: [Circular],
         onread: [Function: onread],
         onconnection: null,
         writeQueueSize: 0,
         _consumed: true },
      _parent: null,
      _host: null,
      _readableState:
       ReadableState {
         objectMode: false,
         highWaterMark: 16384,
         buffer: [Object],
         length: 0,
         pipes: null,
         pipesCount: 0,
         flowing: true,
         ended: false,
         endEmitted: false,
         reading: true,
         sync: false,
         needReadable: true,
         emittedReadable: false,
         readableListening: false,
         resumeScheduled: false,
         defaultEncoding: 'utf8',
         ranOut: false,
         awaitDrain: 0,
         readingMore: false,
         decoder: null,
         encoding: null },
      readable: true,
      domain: null,
      _events:
       { end: [Object],
         finish: [Function: onSocketFinish],
         _socketEnd: [Function: onSocketEnd],
         drain: [Object],
         timeout: [Function],
         error: [Function: socketOnError],
         close: [Object],
         data: [Function: socketOnData],
         resume: [Function: onSocketResume],
         pause: [Function: onSocketPause] },
      _eventsCount: 10,
      _maxListeners: undefined,
      _writableState:
       WritableState {
         objectMode: false,
         highWaterMark: 16384,
         needDrain: false,
         ending: false,
         ended: false,
         finished: false,
         decodeStrings: false,
         defaultEncoding: 'utf8',
         length: 0,
         writing: false,
         corked: 0,
         sync: true,
         bufferProcessing: false,
         onwrite: [Function],
         writecb: null,
         writelen: 0,
         bufferedRequest: null,
         lastBufferedRequest: null,
         pendingcb: 0,
         prefinished: false,
         errorEmitted: false,
         bufferedRequestCount: 0,
         corkedRequestsFree: [Object] },
      writable: true,
      allowHalfOpen: true,
      destroyed: false,
      _bytesDispatched: 0,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server:
       Server {
         domain: null,
         _events: [Object],
         _eventsCount: 2,
         _maxListeners: undefined,
         _connections: 1,
         _handle: [Object],
         _usingSlaves: false,
         _slaves: [],
         _unref: false,
         allowHalfOpen: true,
         pauseOnConnect: false,
         httpAllowHalfOpen: false,
         timeout: 120000,
         _pendingResponseData: 0,
         _connectionKey: '6::::36441' },
      _server:
       Server {
         domain: null,
         _events: [Object],
         _eventsCount: 2,
         _maxListeners: undefined,
         _connections: 1,
         _handle: [Object],
         _usingSlaves: false,
         _slaves: [],
         _unref: false,
         allowHalfOpen: true,
         pauseOnConnect: false,
         httpAllowHalfOpen: false,
         timeout: 120000,
         _pendingResponseData: 0,
         _connectionKey: '6::::36441' },
      _idleTimeout: 120000,
      _idleNext:
       TimersList {
         _idleNext: [Circular],
         _idlePrev: [Circular],
         _timer: [Object],
         _unrefed: true,
         msecs: 120000,
         nextTick: false },
      _idlePrev:
       TimersList {
         _idleNext: [Circular],
         _idlePrev: [Circular],
         _timer: [Object],
         _unrefed: true,
         msecs: 120000,
         nextTick: false },
      _idleStart: 29763,
      parser:
       HTTPParser {
         '0': [Function: parserOnHeaders],
         '1': [Function: parserOnHeadersComplete],
         '2': [Function: parserOnBody],
         '3': [Function: parserOnMessageComplete],
         '4': [Function: onParserExecute],
         _headers: [],
         _url: '',
         _consumed: true,
         socket: [Circular],
         incoming: [Circular],
         outgoing: null,
         maxHeaderPairs: 2000,
         onIncoming: [Function: parserOnIncoming] },
      on: [Function: socketOnWrap],
      _paused: false,
      read: [Function],
      _consuming: true,
      _httpMessage:
       ServerResponse {
         domain: null,
         _events: [Object],
         _eventsCount: 1,
         _maxListeners: undefined,
         output: [],
         outputEncodings: [],
         outputCallbacks: [],
         outputSize: 0,
         writable: true,
         _last: false,
         upgrading: false,
         chunkedEncoding: false,
         shouldKeepAlive: false,
         useChunkedEncodingByDefault: true,
         sendDate: true,
         _removedHeader: {},
         _contentLength: null,
         _hasBody: true,
         _trailer: '',
         finished: false,
         _headerSent: false,
         socket: [Circular],
         connection: [Circular],
         _header: null,
         _headers: [Object],
         _headerNames: [Object],
         _onPendingData: [Function: updateOutgoingData],
         req: [Circular],
         locals: {} } },
   httpVersionMajor: 1,
   httpVersionMinor: 1,
   httpVersion: '1.1',
   complete: true,
   headers:
    { host: 'test-chatbot-nodejs.herokuapp.com',
      connection: 'close',
      'x-line-signature': 'h7vmJIi1B0AiXJqjG51E5gk1cXczA7TxCC4/5tmmI/0=',
      'content-type': 'application/json;charset=UTF-8',
      accept: '*/*',
      'user-agent': 'LineBotWebhook/1.0',
      'x-request-id': '7838c7c9-dbc3-47b6-ac8c-19788a0fb2b2',
      'x-forwarded-for': '203.104.146.155',
      'x-forwarded-proto': 'https',
      'x-forwarded-port': '443',
      via: '1.1 vegur',
      'connect-time': '0',
      'x-request-start': '1508053333124',
      'total-route-time': '0',
      'content-length': '277' },
   rawHeaders:
    [ 'Host',
      'test-chatbot-nodejs.herokuapp.com',
      'Connection',
      'close',
      'X-Line-Signature',
      'h7vmJIi1B0AiXJqjG51E5gk1cXczA7TxCC4/5tmmI/0=',
      'Content-Type',
      'application/json;charset=UTF-8',
      'Accept',
      '*/*',
      'User-Agent',
      'LineBotWebhook/1.0',
      'X-Request-Id',
      '7838c7c9-dbc3-47b6-ac8c-19788a0fb2b2',
      'X-Forwarded-For',
      '203.104.146.155',
      'X-Forwarded-Proto',
      'https',
      'X-Forwarded-Port',
      '443',
      'Via',
      '1.1 vegur',
      'Connect-Time',
      '0',
      'X-Request-Start',
      '1508053333124',
      'Total-Route-Time',
      '0',
      'Content-Length',
      '277' ],
   trailers: {},
   rawTrailers: [],
   upgrade: false,
   url: '/callback',
   method: 'POST',
   statusCode: null,
   statusMessage: null,
   client:
    Socket {
      connecting: false,
      _hadError: false,
      _handle:
       TCP {
         bytesRead: 761,
         _externalStream: {},
         fd: 11,
         reading: true,
         owner: [Circular],
         onread: [Function: onread],
         onconnection: null,
         writeQueueSize: 0,
         _consumed: true },
      _parent: null,
      _host: null,
      _readableState:
       ReadableState {
         objectMode: false,
         highWaterMark: 16384,
         buffer: [Object],
         length: 0,
         pipes: null,
         pipesCount: 0,
         flowing: true,
         ended: false,
         endEmitted: false,
         reading: true,
         sync: false,
         needReadable: true,
         emittedReadable: false,
         readableListening: false,
         resumeScheduled: false,
         defaultEncoding: 'utf8',
         ranOut: false,
         awaitDrain: 0,
         readingMore: false,
         decoder: null,
         encoding: null },
      readable: true,
      domain: null,
      _events:
       { end: [Object],
         finish: [Function: onSocketFinish],
         _socketEnd: [Function: onSocketEnd],
         drain: [Object],
         timeout: [Function],
         error: [Function: socketOnError],
         close: [Object],
         data: [Function: socketOnData],
         resume: [Function: onSocketResume],
         pause: [Function: onSocketPause] },
      _eventsCount: 10,
      _maxListeners: undefined,
      _writableState:
       WritableState {
         objectMode: false,
         highWaterMark: 16384,
         needDrain: false,
         ending: false,
         ended: false,
         finished: false,
         decodeStrings: false,
         defaultEncoding: 'utf8',
         length: 0,
         writing: false,
         corked: 0,
         sync: true,
         bufferProcessing: false,
         onwrite: [Function],
         writecb: null,
         writelen: 0,
         bufferedRequest: null,
         lastBufferedRequest: null,
         pendingcb: 0,
         prefinished: false,
         errorEmitted: false,
         bufferedRequestCount: 0,
         corkedRequestsFree: [Object] },
      writable: true,
      allowHalfOpen: true,
      destroyed: false,
      _bytesDispatched: 0,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server:
       Server {
         domain: null,
         _events: [Object],
         _eventsCount: 2,
         _maxListeners: undefined,
         _connections: 1,
         _handle: [Object],
         _usingSlaves: false,
         _slaves: [],
         _unref: false,
         allowHalfOpen: true,
         pauseOnConnect: false,
         httpAllowHalfOpen: false,
         timeout: 120000,
         _pendingResponseData: 0,
         _connectionKey: '6::::36441' },
      _server:
       Server {
         domain: null,
         _events: [Object],
         _eventsCount: 2,
         _maxListeners: undefined,
         _connections: 1,
         _handle: [Object],
         _usingSlaves: false,
         _slaves: [],
         _unref: false,
         allowHalfOpen: true,
         pauseOnConnect: false,
         httpAllowHalfOpen: false,
         timeout: 120000,
         _pendingResponseData: 0,
         _connectionKey: '6::::36441' },
      _idleTimeout: 120000,
      _idleNext:
       TimersList {
         _idleNext: [Circular],
         _idlePrev: [Circular],
         _timer: [Object],
         _unrefed: true,
         msecs: 120000,
         nextTick: false },
      _idlePrev:
       TimersList {
         _idleNext: [Circular],
         _idlePrev: [Circular],
         _timer: [Object],
         _unrefed: true,
         msecs: 120000,
         nextTick: false },
      _idleStart: 29763,
      parser:
       HTTPParser {
         '0': [Function: parserOnHeaders],
         '1': [Function: parserOnHeadersComplete],
         '2': [Function: parserOnBody],
         '3': [Function: parserOnMessageComplete],
         '4': [Function: onParserExecute],
         _headers: [],
         _url: '',
         _consumed: true,
         socket: [Circular],
         incoming: [Circular],
         outgoing: null,
         maxHeaderPairs: 2000,
         onIncoming: [Function: parserOnIncoming] },
      on: [Function: socketOnWrap],
      _paused: false,
      read: [Function],
      _consuming: true,
      _httpMessage:
       ServerResponse {
         domain: null,
         _events: [Object],
         _eventsCount: 1,
         _maxListeners: undefined,
         output: [],
         outputEncodings: [],
         outputCallbacks: [],
         outputSize: 0,
         writable: true,
         _last: false,
         upgrading: false,
         chunkedEncoding: false,
         shouldKeepAlive: false,
         useChunkedEncodingByDefault: true,
         sendDate: true,
         _removedHeader: {},
         _contentLength: null,
         _hasBody: true,
         _trailer: '',
         finished: false,
         _headerSent: false,
         socket: [Circular],
         connection: [Circular],
         _header: null,
         _headers: [Object],
         _headerNames: [Object],
         _onPendingData: [Function: updateOutgoingData],
         req: [Circular],
         locals: {} } },
   _consuming: true,
   _dumped: false,
   next: [Function: next],
   baseUrl: '',
   originalUrl: '/callback',
   _parsedUrl:
    Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/callback',
      path: '/callback',
      href: '/callback',
      _raw: '/callback' },
   params: {},
   query: {},
   res:
    ServerResponse {
      domain: null,
      _events: { finish: [Function: resOnFinish] },
      _eventsCount: 1,
      _maxListeners: undefined,
      output: [],
      outputEncodings: [],
      outputCallbacks: [],
      outputSize: 0,
      writable: true,
      _last: false,
      upgrading: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedHeader: {},
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket:
       Socket {
         connecting: false,
         _hadError: false,
         _handle: [Object],
         _parent: null,
         _host: null,
         _readableState: [Object],
         readable: true,
         domain: null,
         _events: [Object],
         _eventsCount: 10,
         _maxListeners: undefined,
         _writableState: [Object],
         writable: true,
         allowHalfOpen: true,
         destroyed: false,
         _bytesDispatched: 0,
         _sockname: null,
         _pendingData: null,
         _pendingEncoding: '',
         server: [Object],
         _server: [Object],
         _idleTimeout: 120000,
         _idleNext: [Object],
         _idlePrev: [Object],
         _idleStart: 29763,
         parser: [Object],
         on: [Function: socketOnWrap],
         _paused: false,
         read: [Function],
         _consuming: true,
         _httpMessage: [Circular] },
      connection:
       Socket {
         connecting: false,
         _hadError: false,
         _handle: [Object],
         _parent: null,
         _host: null,
         _readableState: [Object],
         readable: true,
         domain: null,
         _events: [Object],
         _eventsCount: 10,
         _maxListeners: undefined,
         _writableState: [Object],
         writable: true,
         allowHalfOpen: true,
         destroyed: false,
         _bytesDispatched: 0,
         _sockname: null,
         _pendingData: null,
         _pendingEncoding: '',
         server: [Object],
         _server: [Object],
         _idleTimeout: 120000,
         _idleNext: [Object],
         _idlePrev: [Object],
         _idleStart: 29763,
         parser: [Object],
         on: [Function: socketOnWrap],
         _paused: false,
         read: [Function],
         _consuming: true,
         _httpMessage: [Circular] },
      _header: null,
      _headers: { 'x-powered-by': 'Express' },
      _headerNames: { 'x-powered-by': 'X-Powered-By' },
      _onPendingData: [Function: updateOutgoingData],
      req: [Circular],
      locals: {} },
   body: { events: [ [Object] ] },
   _body: true,
   length: undefined,
   read: [Function],
   route:
    Route {
      path: '/callback',
      stack: [ [Object] ],
      methods: { post: true } } }
